plugins {
	id 'fabric-loom' version '1.0-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	mavenLocal()
	maven { url = "https://www.cursemaven.com" }
	// maven { url = "https://maven.wispforest.io/" }
	maven { url "https://maven.shedaniel.me" }
	maven { url "https://maven.terraformersmc.com" }
	maven { url = "https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/" }

	flatDir {
		dir('libs')
	}
	mavenCentral()
}

dependencies {

	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// GeckoLib
	modImplementation "software.bernie.geckolib:geckolib-fabric-1.19:3.1.38"

	// OwO Lib
	// annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
	// include "io.wispforest:owo-sentinel:${project.owo_version}"

	// REI
	// modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	// modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"

	// Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
}

sourceSets {
	main{
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}

loom {
	runs {
		datagen {
			server()

			name "Minecraft Data"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"

			runDir "build/datagen"
		}
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	withSourcesJar()
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
}

jar {
	from "LICENSE"
}